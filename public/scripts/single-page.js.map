{"version":3,"names":[],"mappings":"","sources":["single-page.js"],"sourcesContent":["const monthsTH = [\"ม.ค.\",\"ก.พ.\",\"มี.ค\",\"เม.ย.\",\"พ.ค.\",\"มิ.ย\",\"ก.ค.\",\"ส.ค.\",\"ก.ย.\",\"ต.ค.\",\"พ.ย.\",\"ธ.ค.\"];\nconst weekdaysTH = [\"อา.\", \"จ.\", \"อ.\", \"พ.\", \"พฤ.\", \"ศ.\", \"ส.\"];\nconst monthsEN = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\nconst weekdaysEN = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nconst times = [];\nfor (let t = 0, i = 0; t <= 23.5; t += 0.5, i++)\n\ttimes.push({ slot: i, time: t });\n\nconst apiURL = \"https://api.space.itforge.io/graphql\";\n\nfunction findMin_Max() {\n\tmin_time = Math.min.apply(null, app.chosenTimes);\n\tmax_time = Math.max.apply(null, app.chosenTimes);\n}\nfunction setSelected() {\n\tfor (let j = min_time; j <= max_time; j += 0.5) {\n\t\tdocument.getElementById((id = \"slot-\" + j)).removeAttribute(\"class\");\n\t\tdocument\n\t\t\t.getElementById((id = \"slot-\" + j))\n\t\t\t.setAttribute(\"class\", \"slot selected\");\n\t}\n}\nfunction setApiDate(date) {\n\t// create a raw date for sending to the API (eg. 2018-04-14)\n\tlet m = date.getMonth() + 1;\n\tlet d = date.getDate();\n\treturn (\n\t\tdate.getFullYear() +\n\t\t\"-\" +\n\t\t(m < 10 ? \"0\" + m : m) +\n\t\t\"-\" +\n\t\t(d < 10 ? \"0\" + d : d)\n\t);\n}\n\nvar app = new Vue({\n\tel: \"#app\",\n\tdata: {\n\t\tr_date: \"\",\n\t\tr_date_raw: new Date(),\n\t\tr_startTime: \"18\",\n\t\tr_endTime: \"19\",\n\t\tchosenTimes: [],\n\t\tchosenSlots: [],\n\t\tsubmitText: \"ส่งรายงาน\",\n\t\tspaceId: \"\",\n\t\treportTitle: \"\",\n\t\treportBody: \"\",\n\t\treportToken: \"\",\n\t\treportSent: false,\n\t\tsubmitHasError: false\n\t},\n\tmethods: {\n\t\tsendReport: () => {\n\t\t\tapp.submitText = \"กำลังส่ง...\";\n\t\t\taxios(apiURL, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\tquery: `\n\t\t\t\t\t\tmutation {\n\t\t\t\t\t\t\tcreateProblem(input: {spaceId: \"${app.spaceId}\", title: \"${\n\t\t\t\t\t\tapp.reportTitle\n\t\t\t\t\t}\", body: \"${app.reportBody}\"}) {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t`\n\t\t\t\t},\n\t\t\t\theaders: { Authorization: \"bearer\" + app.reportToken }\n\t\t\t})\n\t\t\t\t.then(result => {\n\t\t\t\t\tconsole.log(result);\n\t\t\t\t\tapp.submitText = \"ส่งรายงาน\";\n\t\t\t\t\tapp.reportSent = true;\n\t\t\t\t\tapp.reportTitle = \"\";\n\t\t\t\t\tapp.reportBody = \"\";\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\tapp.reportSent = false;\n\t\t\t\t\tapp.submitText = \"ส่งรายงาน\";\n\t\t\t\t\tapp.submitHasError = true;\n\t\t\t\t});\n\t\t}\n\t}\n});\n\n// Date picker\nconst today = new Date();\nvar picker = new Pikaday({\n\tfield: document.getElementById(\"datepicker\"),\n\ti18n: {\n\t\tpreviousMonth: \"เดือนที่แล้ว\",\n\t\tnextMonth: \"เดือนหน้า\",\n\t\tmonths: monthsTH,\n\t\tweekdays: weekdaysEN,\n\t\tweekdaysShort: weekdaysTH\n\t},\n\tfirstDay: 1,\n\tminDate: today,\n\tmaxDate: new Date(\n\t\ttoday.getFullYear() + 1,\n\t\ttoday.getMonth(),\n\t\ttoday.getDate()\n\t),\n\tyearRange: [today.getFullYear(), today.getFullYear() + 1],\n\tonClose: () => {\n\t\tapp.r_date_raw = document.getElementById(\"datepicker\").value;\n\t\tapp.r_date = setApiDate(picker.getDate());\n\t},\n\ttoString(date) {\n\t\tconst day = date.toString().split(\" \")[2];\n\t\tconst month = date.toString().split(\" \")[1];\n\t\tconst weekday = date.toString().split(\" \")[0];\n\t\tconst monthsMapper = element => element == `${month}`;\n\t\tconst weekdaysMapper = element => element == `${weekday}`;\n\t\tapp.r_date_raw = `${\n\t\t\tweekdaysTH[weekdaysEN.findIndex(weekdaysMapper)]\n\t\t}\\u0020${day}\\u0020${monthsTH[monthsEN.findIndex(monthsMapper)]}`;\n\t\treturn `${\n\t\t\tweekdaysTH[weekdaysEN.findIndex(weekdaysMapper)]\n\t\t}\\u0020${day}\\u0020${monthsTH[monthsEN.findIndex(monthsMapper)]}`;\n\t}\n});\napp.r_date = setApiDate(picker.getDate());\n\n// Time picker\nfunction drawSelected() {\n\tfor (var i = 18; i <= 39; i++) {\n\t\t$(\"#\" + i).removeClass(\"selected\");\n\t}\n\tvar startPoint = Math.min(app.r_startTime, app.r_endTime);\n\tvar endPoint = Math.max(app.r_startTime, app.r_endTime);\n\tfor (var j = startPoint; j < endPoint; j++) {\n\t\t$(\"#\" + j).addClass(\"selected\");\n\t}\n}\n\nconst timeToSlot = time => {\n\tlet hr = parseInt(time.split(\":\")[0]);\n\tlet mn = parseInt(time.split(\":\")[1]);\n\tif (mn == 0) return times[hr * 2].slot;\n\telse return times[hr * 2 + 1].slot;\n};\nlet isFirstTimeChoosing = true;\n\n$(\"#timeStart\").clockTimePicker({\n\tprecision: 30,\n\trequired: true,\n\tminimum: \"09:00\",\n\tmaximum: \"19:30\",\n\tonAdjust: (newVal, oldVal) => {\n\t\tlet time = newVal.split(\":\");\n\t\tapp.r_startTime = timeToSlot(time[0] + \":\" + time[1]);\n\t\tif (isFirstTimeChoosing) {\n\t\t\tlet endHr = time[1] == \"00\" ? time[0] : ++time[0];\n\t\t\tlet endMn = time[1] == \"00\" ? \"30\" : \"00\";\n\t\t\t$(\"#timeEnd\").val(endHr + \":\" + endMn);\n\t\t\tapp.r_endTime = timeToSlot(endHr + \":\" + endMn);\n\t\t}\n\t},\n\tonClose: () => {\n\t\tisFirstTimeChoosing = false;\n\t\tdrawSelected();\n\t}\n});\n$(\"#timeEnd\").clockTimePicker({\n\tprecision: 30,\n\trequired: true,\n\tminimum: \"09:00\",\n\tmaximum: \"19:30\",\n\tonAdjust: (newVal, oldVal) => {\n\t\tlet time = newVal.split(\":\");\n\t\tapp.r_endTime = timeToSlot(time[0] + \":\" + time[1]);\n\t},\n\tonClose: () => {\n\t\tisFirstTimeChoosing = false;\n\t\tdrawSelected();\n\t}\n});\n"],"file":"single-page.js"}